generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"

  url = env("DATABASE_URL")

  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MUSEUM
  CREATOR
  EDITOR
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  password           String
  role               Role               @default(USER)
  posts              Post[]
  products           Product[]
  images             String?
  title              String? // New field for user title
  bio                String? // New field for user bio
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdExhibitions Exhibition[]       @relation("UserCreatedExhibitions")
  exhibitionArtists  ExhibitionArtist[] // Added relation to ExhibitionArtist
  // Other fields...
  artTerms           ArtTerm[]

  @@map("user")
}

model Post {
  id Int @id @default(autoincrement())

  title_en    String @db.VarChar(50)
  title_uk    String @db.VarChar(50)
  content_en  String @db.VarChar(500)
  content_uk  String @db.VarChar(500) 

  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int      @map("author_id")
  images     String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model Product {
  id Int @id @default(autoincrement())

  title_en        String @db.VarChar(50)
  title_uk        String @db.VarChar(50)
  description_en  String @db.VarChar(500)
  description_uk  String @db.VarChar(500)
  specs_en        String? @db.VarChar(500)
  specs_uk        String? @db.VarChar(500)

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  author         User           @relation(fields: [authorId], references: [id])
  authorId       Int
  images         ProductImage[] @relation("ProductImages")
  artTerms       ArtTerm[]
}

model ProductImage {
  id Int @id @default(autoincrement())

  imageUrl String

  productId Int
  product   Product @relation("ProductImages", fields: [productId], references: [id])
}

model Exhibition {
  id                Int                @id @default(autoincrement())
  title_en          String? @db.VarChar(50)
  description_en    String? @db.VarChar(500)
  title_uk          String? @db.VarChar(50)
  description_uk    String? @db.VarChar(500)
  startDate         DateTime
  endDate           DateTime
  time              String? @db.VarChar(200)
  location_en       String? @db.VarChar(500)
  location_uk       String? @db.VarChar(500)
  createdById       Int
  createdBy         User               @relation("UserCreatedExhibitions", fields: [createdById], references: [id])
  exhibitionArtists ExhibitionArtist[]
  images            ExhibitionImage[]  @relation("ExhibitionsImages")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model ExhibitionImage {
  id           Int        @id @default(autoincrement())
  imageUrl     String
  exhibition   Exhibition @relation("ExhibitionsImages", onDelete: Cascade, fields: [exhibitionId], references: [id])
  exhibitionId Int
}

model ExhibitionArtist {
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id])
  exhibitionId Int
  artist       User       @relation(fields: [artistId], references: [id])
  artistId     Int

  @@id([exhibitionId, artistId])
  @@index([artistId], map: "ExhibitionArtist_artistId_fkey")
}

model ArtTerm {
  id Int @id @default(autoincrement())

  title_en String @db.VarChar(100)

  title_uk String @db.VarChar(100)

  description_en String @db.VarChar(350)

  description_uk String @db.VarChar(350)

  content_en String @db.Text

  content_uk String @db.Text
  author     User   @relation(fields: [authorId], references: [id])
  authorId   Int    @map("author_id")

  highlightedProduct   Product @relation(fields: [highlightedProductId], references: [id])
  highlightedProductId Int     @map("highlighted_product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
